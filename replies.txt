1. Two Sum
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        # create a dictionary to store values and their indices
        num_dict = {}
        # loop through the nums list
        for i in range(len(nums)):
            # calculate the difference between the target and current num
            difference = target - nums[i]
            # if the difference is in the dictionary, return the indices
            if difference in num_dict:
                return [num_dict[difference], i]
            # add the current num to the dictionary with its index
            num_dict[nums[i]] = i

15. 3Sum
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        
        res = []
        nums.sort()
        
        for i in range(len(nums)-2):
            
            if i > 0 and nums[i] == nums[i-1]:
                continue
                
            j,k = i+1, len(nums)-1
            
            while j < k:
                curSum = nums[i] + nums[j] + nums[k]
                
                if curSum == 0:
                    res.append([nums[i], nums[j], nums[k]])
                    while j < k and nums[j] == nums[j+1]:
                        j+=1
                    while j < k and nums[k] == nums[k-1]:
                        k-=1
                    j+=1
                    k-=1
                
                elif curSum < 0:
                    j+=1
                else:
                    k-=1
                    
        return res

18. 4Sum
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        n = len(nums)
        res = []
        for a in range(n - 3):
            if a > 0 and nums[a] == nums[a - 1]:
                continue
            for b in range(a + 1, n - 2):
                if b > a + 1 and nums[b] == nums[b - 1]:
                    continue
                c, d = b + 1, n - 1
                while c < d:
                    s = nums[a] + nums[b] + nums[c] + nums[d]
                    if s == target:
                        res.append([nums[a], nums[b], nums[c], nums[d]])
                        while c < d and nums[c] == nums[c + 1]:
                            c += 1
                        while c < d and nums[d] == nums[d - 1]:
                            d -= 1
                        c += 1
                        d -= 1
                    elif s < target:
                        c += 1
                    else:
                        d -= 1
        return res

167. Two Sum II - Input Array Is Sorted
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        left = 0
        right = len(numbers) - 1
        while left < right:
            current_sum = numbers[left] + numbers[right]
            if current_sum == target:
                return [left+1, right+1]
            elif current_sum < target:
                left += 1
            else:
                right -= 1
        return [-1,-1]

560. Subarray Sum Equals K
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        count = 0
        sum_map = {0: 1}
        sum_so_far = 0
        
        for num in nums:
            sum_so_far += num
            count += sum_map.get(sum_so_far - k, 0)
            sum_map[sum_so_far] = sum_map.get(sum_so_far, 0) + 1
        
        return count

653. Two Sum IV - Input is a BST
class Solution:
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        if not root:
            return False
        stack, seen = [], set()
        stack.append(root)
        while stack:
            node = stack.pop()
            if k - node.val in seen:
                return True
            seen.add(node.val)
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
        return False

1679. Max Number of K-Sum Pairs
class Solution:
    def maxOperations(self, nums: List[int], k: int) -> int:
        count = 0
        num_dict = {}
        for num in nums:
            if k - num in num_dict and num_dict[k - num] > 0:
                count += 1
                num_dict[k - num] -= 1
            else:
                num_dict[num] = num_dict.get(num, 0) + 1
        return count

1711. Count Good Meals
class Solution:
    def countPairs(self, deliciousness: List[int]) -> int:
        MOD = 10**9 + 7
        freq = {}
        for d in deliciousness:
            if d not in freq:
                freq[d] = 0
            freq[d] += 1
        ans = 0
        for d in freq:
            for k in range(22):
                target = 2**k - d
                if target in freq and (d != target or freq[d] > 1):
                    ans += freq[d] * freq[target]
        return ans // 2 % MOD

2006. Count Number of Pairs With Absolute Difference K
class Solution:
    def countKDifference(self, nums: List[int], k: int) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if abs(nums[i] - nums[j]) == k:
                    count += 1
        return count

2023. Number of Pairs of Strings With Concatenation Equal to Target
class Solution:
    def numOfPairs(self, nums: List[str], target: str) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(len(nums)):
                if i != j:
                    if nums[i]+nums[j] == target:
                        count += 1
        return count

2200. Find All K-Distant Indices in an Array
class Solution:
    def findKDistantIndices(self, nums: List[int], key: int, k: int) -> List[int]:
        kDistant_indices = []
        for i in range(len(nums)):
            if nums[i] == key:
                for j in range(max(0, i-k), i+k+1):
                    if nums[j] == key and abs(i-j) <= k:
                        kDistant_indices.append(j)
        return sorted(kDistant_indices)

2351. First Letter to Appear Twice
class Solution:
    def repeatedCharacter(self, s: str) -> str:
        freq = {}
        for i in range(len(s)):
            if s[i] in freq:
                return s[i]
            else:
                freq[s[i]] = 1

2354. Number of Excellent Pairs
class Solution:
    def countExcellentPairs(self, nums: List[int], k: int) -> int:
        pairs = set()
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                num1, num2 = nums[i], nums[j]
                bitwise_or = num1 | num2
                bitwise_and = num1 & num2
                set_bit_count = bin(bitwise_or | bitwise_and).count('1')
                if set_bit_count >= k:
                    pairs.add((min(num1, num2), max(num1, num2)))
        return len(pairs)

2367. Number of Arithmetic Triplets
class Solution:
    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:
        ans = 0
        dp = {}
        for num in nums:
            ans += dp.get(num - diff, 0) + dp.get(num + diff, 0)
            dp[num] = dp.get(num, 0) + 1
        return ans

2374. Node With Highest Edge Score
class Solution:
    def edgeScore(self, edges: List[int]) -> int:
        n = len(edges)
        in_degrees = [0] * n
        score = [0] * n
        
        for i in range(n):
            if edges[i] != -1:
                in_degrees[edges[i]] += 1
        
        for i in range(n):
            if in_degrees[i] == 0:
                continue
            j = i
            while in_degrees[j] == 1:
                in_degrees[j] = 0
                score[edges[j]] += i
                j = edges[j]
        
        max_score = float('-inf')
        ans = 0
        for i in range(n):
            if score[i] > max_score:
                max_score = score[i]
                ans = i
        
        return ans

2399. Check Distances Between Same Letters
class Solution:
    def checkDistances(self, s: str, distance: List[int]) -> bool:
        letters = set(s)
        for letter in letters:
            indices = [i for i in range(len(s)) if s[i] == letter]
            if len(indices) > 1:
                for i in range(len(indices) - 1):
                    if indices[i+1] - indices[i] - 1 != distance[ord(letter) - ord('a')]:
                        return False
        return True

2395. Find Subarrays With Equal Sum
class Solution:
    def findSubarrays(self, nums: List[int]) -> bool:
        subarrays = {}
        for i in range(len(nums)-1):
            for j in range(i+1,len(nums)):
                if(sum(nums[i:i+2]) == sum(nums[j:j+2])):
                    if(i not in subarrays):
                        subarrays[i] = set()
                    subarrays[i].add(j)
                    if(j not in subarrays):
                        subarrays[j] = set()
                    subarrays[j].add(i)
        for k in subarrays:
            if len(subarrays[k]) > 1:
                return True
        return False

2441. Largest Positive Integer That Exists With Its Negative
class Solution:
    def findMaxK(self, nums: List[int]) -> int:
        max_k = -1
        for num in nums:
            if -num in nums and num > max_k:
                max_k = num
        return max_k

2465. Number of Distinct Averages
class Solution:
    def distinctAverages(self, nums: List[int]) -> int:
        averages = set()
        n = len(nums)
        for i in range(n//2):
            min_num = min(nums)
            nums.remove(min_num)
            max_num = max(nums)
            nums.remove(max_num)
            avg = (min_num + max_num) / 2
            averages.add(avg)
        return len(averages)

